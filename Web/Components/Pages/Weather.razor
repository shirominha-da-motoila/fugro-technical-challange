@page "/weather"
@using Modules.CalculateOffsetAndStation
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject ApiClient Api

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

@if (output == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @* <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table> *@
}

@code {
    private CalculateOffsetAndStationOutput? output;
    
    // protected override async Task OnInitializedAsync()
    // {
    //     output = await Api.CalculateOffsetAndStationAsync();
    // }
}
