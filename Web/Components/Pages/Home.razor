@page "/"
@rendermode InteractiveServer
@inject ApiClient Api

<PageTitle>Fugro Technical Challenge</PageTitle>

<h1>Polyline</h1>

Calculate <code>Offset</code> and <code>Station</code>


<EditForm method="post" Model="Input" FormName="form" class="container d-grid row-gap-4 m-0 py-4" OnValidSubmit="Submit">
	<label class="d-flex flex-column">
		Polyline:
		<InputFile OnChange="FileLoad" accept=".csv" />
	</label>
	<label class="d-flex flex-column row-gap-2">
		Point:
		<label class="d-flex flex-column">
			X:
			<InputNumber @bind-Value="Input.Point.X" TValue="double" class="px-2" />
		</label>
		<label class="d-flex flex-column">
			Y:
			<InputNumber @bind-Value="Input.Point.Y" TValue="double" class="px-2" />
		</label>
	</label>
	<button class="w-100 border-1">Calculate</button>

	@if (Output != null)
	{
		@foreach (var OffsetAndStation in Output.OffsetsAndStations)
		{
			<label>
				Offset:
				@OffsetAndStation.Offset
			</label>
			<label>
				Station:
				@OffsetAndStation.Station
			</label>
			<hr />
		}
	}
</EditForm>

@code {
	[SupplyParameterFromForm]
	private CalculateOffsetAndStationInput Input { get; set; } = new CalculateOffsetAndStationInput();

	private CalculateOffsetsAndStationsOutput? Output;

	private async Task<bool> Submit()
	{
		Output = await Api.CalculateOffsetAndStationAsync(Input);
		StateHasChanged();

		return false;
	}

	private async Task FileLoad(InputFileChangeEventArgs eventArgs)
	{
		MemoryStream stream = new MemoryStream();
		await eventArgs.File.OpenReadStream().CopyToAsync(stream);
		stream.Position = 0;

		using (var reader = new StreamReader(stream, Encoding.UTF8))
		using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
		{
			var records = csv.GetRecords<PointDto>();
			Input.Polyline = records.ToList();
		}
		StateHasChanged();
	}
}